{"version":3,"sources":["ng-table-async.js"],"names":["angular","module","call","this","parseColumn","parseColumnContent","parseColumnHeader","column","content","contentAttr","contentElement","element","html","_","isEmpty","find","outerHTML","attr","header","directive","$q","ngTableParams","restrict","scope","options","template","attrs","columns","compiledContents","compiledHeaders","loadingElement","loadingTemplate","loadingTemplateUrl","ndaElement","ndaTemplate","ndaTemplateUrl","pagerElement","pagerTemplate","pagerTemplateUrl","parsedColumns","map","join","controller","$scope","$element","ngTableAsyncDefaults","merge","pagerOnTop","PAGER_ON_TOP","pagerOnBottom","PAGER_ON_BOTTOM","defaultPage","DEFAULT_PAGE","pageSize","PAGE_SIZE","mainScope","tableParams","page","count","getData","$defer","params","limit","skip","loading","getPage","then","results","total","resolve","value","NO_DATA_TEXT","SUPPORTED_VALUES","NTA_ACTION_SIZE","NTA_ACTION_STYLE","DEFAULT_VALUES","DEFAULT_TEMPLATES","NTA_ACTION","NTA_LOADING","NTA_NO_DATA","NTA_PAGER","parseDialogAttribute","indexOf","item","i","l","length","d","dialog","templateUrl","isUndefined","isFunction","isObject","isString","$attrs","$injector","$modal","action","defaults","error","method","performAction","performActionWithDialog","ref","ref1","reload","triggerAction","actions","label","icon","size","style","when","get","modalInstance","modalScope","$new","open","result","onCancel","_error","text"],"mappings":"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","file":"ng-table-async.min.js","sourcesContent":["/*\n * ng-table-async\n * ngTable wrapper that offers some basic functionality and abstractions for working with asynchronous tables.\n * @author  Andrés Mata Suárez <amatasuarez@gmail.com>\n * @version 0.0.0\n * @link    https://github.com/andresmatasuarez/ng-table-async\n * @license MIT\n */\n(function() {\n  'use strict';\n  angular.module('ngTableAsync', ['ngTable']);\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module, parseColumn, parseColumnContent, parseColumnHeader;\n\n  module = angular.module('ngTableAsync');\n\n  parseColumnContent = function(column) {\n    var content, contentAttr, contentElement;\n    column = angular.element(column);\n    content = column.html();\n    if (content) {\n      contentElement = _.isEmpty(column.find('nta-content')) ? column : column.find('nta-content');\n      content = \"<td>\" + contentElement[0].outerHTML + \"</td>\";\n    } else {\n      contentAttr = column.attr('content');\n      content = contentAttr ? \"<td ng-bind=\\\"\" + contentAttr + \"\\\"></td>\" : \"<td></td>\";\n    }\n    return content;\n  };\n\n  parseColumnHeader = function(column) {\n    var header;\n    column = angular.element(column);\n    header = _.isEmpty(column.attr('header')) ? '' : column.attr('header');\n    if (header) {\n      header = \"<th ng-bind=\\\"\" + header + \"\\\"></th>\";\n    } else {\n      if (!_.isEmpty(column.find('nta-content'))) {\n        header = column.find('nta-header').html();\n      }\n      header = \"<th>\" + header + \"</th>\";\n    }\n    return header;\n  };\n\n  parseColumn = function(column) {\n    return {\n      header: parseColumnHeader(column),\n      content: parseColumnContent(column)\n    };\n  };\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsync\n    @module   ngTableAsync\n    @restrict E\n    @description\n    ngTable wrapper directive that offers some basic functionality for working with asynchronous tables.\n   */\n\n  module.directive('ngTableAsync', function($q, ngTableParams) {\n    return {\n      restrict: 'E',\n      scope: {\n        options: '='\n      },\n      template: function(element, attrs) {\n        var columns, compiledContents, compiledHeaders, loadingElement, loadingTemplate, loadingTemplateUrl, ndaElement, ndaTemplate, ndaTemplateUrl, pagerElement, pagerTemplate, pagerTemplateUrl, parsedColumns;\n        columns = element.find('nta-column');\n        parsedColumns = _.map(columns, parseColumn);\n        compiledHeaders = _.map(parsedColumns, 'header');\n        compiledContents = _.map(parsedColumns, 'content');\n        ndaElement = element.find('no-data');\n        ndaTemplate = ndaElement.html();\n        if (!ndaTemplate) {\n          ndaTemplateUrl = ndaElement.attr('template-url');\n          if (ndaTemplateUrl) {\n            ndaTemplate = \"<nta-no-data template-url=\\\"\" + ndaTemplateUrl + \"\\\"></nta-no-data>\";\n          } else {\n            ndaTemplate = \"<nta-no-data text=\\\"\" + (ndaElement.attr('text')) + \"\\\"></nta-no-data>\";\n          }\n        }\n        pagerElement = element.find('pager');\n        pagerTemplateUrl = pagerElement.attr('template-url');\n        pagerTemplate = \"<nta-pager template-url=\\\"\" + pagerTemplateUrl + \"\\\"></nta-pager>\";\n        loadingElement = element.find('loading');\n        loadingTemplateUrl = loadingElement.attr('template-url');\n        loadingTemplate = \"<nta-loading template-url=\\\"\" + loadingTemplateUrl + \"\\\"></nta-loading>\";\n        return \"<div class=\\\"container-fluid nta-container\\\" ng-show=\\\"tableParams.total()\\\"> <div class=\\\"row\\\"> <div class=\\\"col-md-12\\\"> <div ng-if=\\\"options.pagerOnTop\\\"> \" + pagerTemplate + \" </div> <div class=\\\"nta-content row\\\"> <div class=\\\"panel panel-default\\\"> <table ng-table=\\\"tableParams\\\" class=\\\"table ng-table ng-table-responsive nta-table\\\"> <thead> <tr> \" + (compiledHeaders.join(' ')) + \" </tr> </thead> <tbody> <tr ng-repeat=\\\"item in $data\\\"> \" + (compiledContents.join(' ')) + \" </tr> </tbody> </table> </div> <div ng-show=\\\"loading\\\" class=\\\"nta-loading-container\\\"> \" + loadingTemplate + \" </div> </div> <div ng-if=\\\"options.pagerOnBottom\\\"> \" + pagerTemplate + \" </div> </div> </div> </div> <div ng-show=\\\"!tableParams.total()\\\"> \" + ndaTemplate + \" </div>\";\n      },\n      controller: function($scope, $element, ngTableAsyncDefaults) {\n        $scope.options = _.merge({\n          pagerOnTop: ngTableAsyncDefaults.PAGER_ON_TOP,\n          pagerOnBottom: ngTableAsyncDefaults.PAGER_ON_BOTTOM,\n          defaultPage: ngTableAsyncDefaults.DEFAULT_PAGE,\n          pageSize: ngTableAsyncDefaults.PAGE_SIZE\n        }, $scope.options);\n        $scope.mainScope = $scope;\n        return $scope.tableParams = new ngTableParams({\n          page: $scope.options.defaultPage,\n          count: $scope.options.pageSize\n        }, {\n          $scope: $scope,\n          getData: function($defer, params) {\n            var limit, skip;\n            $scope.loading = true;\n            skip = (params.page() - 1) * params.count();\n            limit = params.count();\n            return $scope.options.getPage(skip, limit).then(function(results) {\n              $scope.tableParams.total(results[0]);\n              $defer.resolve(results[1]);\n              return delete $scope.loading;\n            });\n          }\n        });\n      }\n    };\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module;\n\n  module = angular.module('ngTableAsync');\n\n\n  /**\n    @ngdoc       object\n    @name        ngTableAsyncDefaults\n    @module      ngTableAsync\n    @description Default settings for ngTableAsync\n   */\n\n  module.value('ngTableAsyncDefaults', {\n    DEFAULT_PAGE: 1,\n    PAGE_SIZE: 10,\n    NO_DATA_TEXT: 'No available results to show',\n    PAGER_ON_TOP: false,\n    PAGER_ON_BOTTOM: true,\n    SUPPORTED_VALUES: {\n      NTA_ACTION_SIZE: ['xs', 'sm', 'lg'],\n      NTA_ACTION_STYLE: ['default', 'primary', 'success', 'info', 'warning', 'danger', 'link']\n    },\n    DEFAULT_VALUES: {\n      NTA_ACTION_SIZE: '',\n      NTA_ACTION_STYLE: 'default'\n    },\n    DEFAULT_TEMPLATES: {\n      NTA_ACTION: '_ng_table_async_action.html',\n      NTA_LOADING: '_ng_table_async_loading.html',\n      NTA_NO_DATA: '_ng_table_async_no_data.html',\n      NTA_PAGER: '_ng_table_async_pager.html'\n    }\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module, parseDialogAttribute,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  module = angular.module('ngTableAsync');\n\n  parseDialogAttribute = function(d) {\n    var dialog;\n    dialog = d && d.templateUrl ? d : void 0;\n    if (_.isUndefined(dialog) || _.isEmpty(dialog.params) || _.isFunction(dialog.params)) {\n      return dialog;\n    }\n    dialog.params = function() {\n      if (_.isEmpty(dialog.params)) {\n        return void 0;\n      }\n    };\n    dialog.params = function(item) {\n      if (_.isObject(dialog.params)) {\n        return dialog.params;\n      }\n    };\n    if (_.isString(dialog.params)) {\n      dialog.params = function(item) {\n        var params;\n        params = {};\n        params[dialog.params] = item;\n        return params;\n      };\n    }\n    dialog.params = function(item) {\n      return {\n        item: item\n      };\n    };\n    return dialog;\n  };\n\n\n  /**\n    @ngdoc    directive\n    @name     ntaAction\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders an action button for ngTableAsync directive\n   */\n\n  module.directive('ntaAction', function(ngTableAsyncDefaults) {\n    return {\n      restrict: 'E',\n      scope: true,\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return ngTableAsyncDefaults.DEFAULT_TEMPLATES.NTA_ACTION;\n        }\n      },\n      controller: function($scope, $attrs, $q, $injector) {\n        var $modal, action, defaults, dialog, error, method, performAction, performActionWithDialog, ref, ref1, reload, triggerAction;\n        defaults = ngTableAsyncDefaults;\n        action = $scope.options.actions[$attrs.action];\n        method = _.isFunction(action) ? action : action.method;\n        reload = _.isUndefined(action.reload) ? true : action.reload;\n        dialog = parseDialogAttribute(action.dialog);\n        $scope.label = $attrs.label;\n        $scope.icon = $attrs.icon && $attrs.icon !== 'undefined' ? $attrs.icon : void 0;\n        if (ref = $attrs.size, indexOf.call(defaults.SUPPORTED_VALUES.NTA_ACTION_SIZE, ref) >= 0) {\n          $scope.size = \"btn-\" + $attrs.size;\n        } else {\n          $scope.size = defaults.DEFAULT_VALUES.NTA_ACTION_SIZE;\n        }\n        if (ref1 = $attrs.style, indexOf.call(defaults.SUPPORTED_VALUES.NTA_ACTION_STYLE, ref1) >= 0) {\n          $scope.style = \"btn-\" + $attrs.style;\n        } else {\n          $scope.style = \"btn-\" + defaults.DEFAULT_VALUES.NTA_ACTION_STYLE;\n        }\n        performAction = function(item) {\n          $scope.mainScope.loading = true;\n          return $q.when().then(function() {\n            return method(item);\n          }).then(function() {\n            if (reload) {\n              return $scope.tableParams.reload();\n            }\n          })[\"finally\"](function() {\n            return delete $scope.mainScope.loading;\n          });\n        };\n        if (!_.isEmpty(action.dialog)) {\n          try {\n            $modal = $injector.get('$modal');\n            performActionWithDialog = function(item) {\n              var modalInstance, modalScope, params;\n              params = dialog.params(item);\n              modalScope = _.merge($scope.$new(true), params);\n              modalInstance = $modal.open({\n                templateUrl: dialog.templateUrl,\n                scope: modalScope\n              });\n              return modalInstance.result.then(function() {\n                return performAction(item);\n              })[\"catch\"](function() {\n                if (dialog && dialog.onCancel) {\n                  return dialog.onCancel(item, params);\n                }\n              });\n            };\n            triggerAction = performActionWithDialog;\n          } catch (_error) {\n            error = _error;\n            triggerAction = performAction;\n          }\n        } else {\n          triggerAction = performAction;\n        }\n        return $scope[\"do\"] = function() {\n          return triggerAction($scope.item);\n        };\n      }\n    };\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module;\n\n  module = angular.module('ngTableAsync');\n\n\n  /**\n    @ngdoc    directive\n    @name     ntaLoading\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders the 'loading table' markup for ngTableAsync directive\n   */\n\n  module.directive('ntaLoading', function(ngTableAsyncDefaults) {\n    return {\n      restrict: 'E',\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return ngTableAsyncDefaults.DEFAULT_TEMPLATES.NTA_LOADING;\n        }\n      }\n    };\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module;\n\n  module = angular.module('ngTableAsync');\n\n\n  /**\n    @ngdoc    directive\n    @name     ntaNoData\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders a 'No available data' for ngTableAsync directive\n   */\n\n  module.directive('ntaNoData', function(ngTableAsyncDefaults) {\n    return {\n      restrict: 'E',\n      scope: true,\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return ngTableAsyncDefaults.DEFAULT_TEMPLATES.NTA_NO_DATA;\n        }\n      },\n      controller: function($scope, $element, $attrs) {\n        if (!$attrs.text || $attrs.text === 'undefined') {\n          $attrs.text = ngTableAsyncDefaults.NO_DATA_TEXT;\n        }\n        return $scope.text = $attrs.text;\n      }\n    };\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module;\n\n  module = angular.module('ngTableAsync');\n\n\n  /**\n    @ngdoc    directive\n    @name     ntaPager\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders a pager for ngTableAsync directive\n   */\n\n  module.directive('ntaPager', function(ngTableAsyncDefaults) {\n    return {\n      restrict: 'E',\n      template: function(element, attrs) {\n        if (!attrs.templateUrl || attrs.templateUrl === 'undefined') {\n          attrs.templateUrl = ngTableAsyncDefaults.DEFAULT_TEMPLATES.NTA_PAGER;\n        }\n        return \"<div ng-table-pagination=\\\"tableParams\\\" template-url=\\\"'\" + attrs.templateUrl + \"'\\\"></div>\";\n      }\n    };\n  });\n\n}).call(this);\n"],"sourceRoot":"/source/"}