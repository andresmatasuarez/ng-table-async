{"version":3,"sources":["ng_table_async.coffee","ng-table-async.js","nta_action.coffee","nta_loading.coffee","nta_no_data.coffee","nta_pager.coffee"],"names":["angular","module","call","this","parseColumn","parseColumnContent","parseColumnHeader","column","content","contentAttr","contentElement","element","html","_","isEmpty","find","outerHTML","attr","header","directive","$q","ngTableParams","restrict","scope","options","template","attrs","columns","compiledContents","compiledHeaders","loadingElement","loadingTemplate","loadingTemplateUrl","ndaElement","ndaTemplate","ndaTemplateUrl","pagerElement","pagerTemplate","pagerTemplateUrl","parsedColumns","map","join","controller","$scope","$element","ngTableAsyncDefaults","merge","pagerOnTop","PAGER_ON_TOP","pagerOnBottom","PAGER_ON_BOTTOM","firstPage","FIRST_PAGE","pageSize","PAGE_SIZE","mainScope","tableParams","page","count","getData","$defer","params","limit","skip","loading","getPage","then","results","total","resolve","value","NO_DATA_AVAILABLE_TEXT","parseDialogAttribute","d","dialog","templateUrl","isUndefined","isFunction","item","isObject","isString","$attrs","$injector","$modal","action","error","method","performAction","performActionWithDialog","ref","reload","triggerAction","actions","label","size","style","icon","when","get","modalInstance","modalScope","$new","open","result","onCancel","_error","text"],"mappings":"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","file":"ng-table-async.min.js","sourcesContent":["'use strict'\n\nmodule = angular.module 'ngTableAsync'\n\nparseColumnContent = (column) ->\n  column  = angular.element column\n  content = column.html()\n\n  if content\n    contentElement = if _.isEmpty(column.find('content')) then column else column.find 'content'\n    content        = \"<td>#{ contentElement[0].outerHTML }</td>\"\n  else\n    contentAttr = column.attr 'content'\n    content     = if contentAttr then \"<td ng-bind=\\\"#{ contentAttr }\\\"></td>\" else \"<td></td>\"\n\n  content\n\nparseColumnHeader = (column) ->\n  column = angular.element column\n  header = if _.isEmpty(column.attr 'header') then '' else column.attr('header')\n\n  if header\n    header = \"<th ng-bind=\\\"#{ header }\\\"></th>\"\n  else\n    if !_.isEmpty column.find('content')\n      header = column.find('header').html()\n    header = \"<th>#{ header }</th>\"\n\n  header\n\nparseColumn = (column) ->\n  header  : parseColumnHeader  column\n  content : parseColumnContent column\n\n###*\n  @ngdoc    directive\n  @name     ngTableAsync\n  @module   ngTableAsync\n  @restrict E\n  @description\n  ngTable wrapper directive that offers some basic functionality for working with asynchronous tables.\n###\nmodule.directive 'ngTableAsync', ($q, ngTableParams) ->\n  restrict: 'E'\n  scope:\n    options: '='\n\n  template: (element, attrs) ->\n    columns          = element.find 'nta-column'\n    parsedColumns    = _.map columns, parseColumn\n    compiledHeaders  = _.map parsedColumns, 'header'\n    compiledContents = _.map parsedColumns, 'content'\n\n    # Determine 'No Data Available' template\n    ndaElement = element.find 'no-data'\n    ndaTemplate = ndaElement.html()\n    if !ndaTemplate\n      ndaTemplateUrl = ndaElement.attr 'template-url'\n      if ndaTemplateUrl\n        ndaTemplate = \"<nta-no-data template-url=\\\"#{ndaTemplateUrl}\\\"></nta-no-data>\"\n      else\n        ndaTemplate = \"<nta-no-data text=\\\"#{ndaElement.attr 'text'}\\\"></nta-no-data>\"\n\n    # Determine pager template\n    pagerElement     = element.find 'pager'\n    pagerTemplateUrl = pagerElement.attr 'template-url'\n    pagerTemplate    = \"<nta-pager template-url=\\\"#{pagerTemplateUrl}\\\"></nta-pager>\"\n\n    # Determine loading template\n    loadingElement     = element.find 'loading'\n    loadingTemplateUrl = loadingElement.attr 'template-url'\n    loadingTemplate    = \"<nta-loading template-url=\\\"#{loadingTemplateUrl}\\\"></nta-loading>\"\n\n    # Tried to extract this template to a separate file\n    # but there is no blocking way to load it.\n    # Sadly, this function cannot return a promise, so\n    # the $templateRequest alternative becomes useless.\n    \"\n    <div class=\\\"container-fluid nta-container\\\" ng-show=\\\"tableParams.total()\\\">\n      <div class=\\\"row\\\">\n        <div class=\\\"col-md-12\\\">\n\n          <div ng-if=\\\"options.pagerOnTop\\\">\n            #{ pagerTemplate }\n          </div>\n\n          <div class=\\\"nta-content row\\\">\n            <div class=\\\"panel panel-default\\\">\n              <table ng-table=\\\"tableParams\\\" class=\\\"table ng-table ng-table-responsive nta-table\\\">\n                <thead>\n                  <tr>\n                    #{ compiledHeaders.join(' ') }\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr ng-repeat=\\\"item in $data\\\">\n                    #{ compiledContents.join(' ') }\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n\n            <div ng-show=\\\"loading\\\" class=\\\"nta-loading-container\\\">\n              #{ loadingTemplate }\n            </div>\n\n          </div>\n\n          <div ng-if=\\\"options.pagerOnBottom\\\">\n            #{ pagerTemplate }\n          </div>\n\n        </div>\n      </div>\n\n    </div>\n\n    <div ng-show=\\\"!tableParams.total()\\\">\n      #{ ndaTemplate }\n    </div>\n\n    \"\n\n  controller: ($scope, $element, ngTableAsyncDefaults) ->\n\n    $scope.options = _.merge\n      pagerOnTop         : ngTableAsyncDefaults.PAGER_ON_TOP\n      pagerOnBottom      : ngTableAsyncDefaults.PAGER_ON_BOTTOM\n      firstPage          : ngTableAsyncDefaults.FIRST_PAGE\n      pageSize           : ngTableAsyncDefaults.PAGE_SIZE\n    , $scope.options\n\n    $scope.mainScope = $scope\n\n    $scope.tableParams = new ngTableParams\n      page  : $scope.options.firstPage\n      count : $scope.options.pageSize\n    ,\n      # '$scope: $scope' line added to avoid\n      # \"TypeError: Cannot read property '$on' of null\"\n      # src: https://github.com/esvit/ng-table/issues/182\n      $scope: $scope\n\n      getData: ($defer, params) ->\n        $scope.loading = true\n\n        skip = (params.page() - 1) * params.count()\n        limit = params.count()\n\n        $scope.options.getPage skip, limit\n        .then (results) ->\n          $scope.tableParams.total results[0]\n          $defer.resolve results[1]\n          delete $scope.loading\n","/**\n * ng-table-async\n * ngTable wrapper that offers some basic functionality and abstractions for working with asynchronous tables.\n * @author  Andrés Mata Suárez <amatasuarez@gmail.com>\n * @version 0.0.0\n * @link    https://github.com/andresmatasuarez/ng-table-async\n * @license MIT\n */\n(function() {\n  'use strict';\n  angular.module('ngTableAsync', ['ngTable']);\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module, parseColumn, parseColumnContent, parseColumnHeader;\n\n  module = angular.module('ngTableAsync');\n\n  parseColumnContent = function(column) {\n    var content, contentAttr, contentElement;\n    column = angular.element(column);\n    content = column.html();\n    if (content) {\n      contentElement = _.isEmpty(column.find('content')) ? column : column.find('content');\n      content = \"<td>\" + contentElement[0].outerHTML + \"</td>\";\n    } else {\n      contentAttr = column.attr('content');\n      content = contentAttr ? \"<td ng-bind=\\\"\" + contentAttr + \"\\\"></td>\" : \"<td></td>\";\n    }\n    return content;\n  };\n\n  parseColumnHeader = function(column) {\n    var header;\n    column = angular.element(column);\n    header = _.isEmpty(column.attr('header')) ? '' : column.attr('header');\n    if (header) {\n      header = \"<th ng-bind=\\\"\" + header + \"\\\"></th>\";\n    } else {\n      if (!_.isEmpty(column.find('content'))) {\n        header = column.find('header').html();\n      }\n      header = \"<th>\" + header + \"</th>\";\n    }\n    return header;\n  };\n\n  parseColumn = function(column) {\n    return {\n      header: parseColumnHeader(column),\n      content: parseColumnContent(column)\n    };\n  };\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsync\n    @module   ngTableAsync\n    @restrict E\n    @description\n    ngTable wrapper directive that offers some basic functionality for working with asynchronous tables.\n   */\n\n  module.directive('ngTableAsync', function($q, ngTableParams) {\n    return {\n      restrict: 'E',\n      scope: {\n        options: '='\n      },\n      template: function(element, attrs) {\n        var columns, compiledContents, compiledHeaders, loadingElement, loadingTemplate, loadingTemplateUrl, ndaElement, ndaTemplate, ndaTemplateUrl, pagerElement, pagerTemplate, pagerTemplateUrl, parsedColumns;\n        columns = element.find('nta-column');\n        parsedColumns = _.map(columns, parseColumn);\n        compiledHeaders = _.map(parsedColumns, 'header');\n        compiledContents = _.map(parsedColumns, 'content');\n        ndaElement = element.find('no-data');\n        ndaTemplate = ndaElement.html();\n        if (!ndaTemplate) {\n          ndaTemplateUrl = ndaElement.attr('template-url');\n          if (ndaTemplateUrl) {\n            ndaTemplate = \"<nta-no-data template-url=\\\"\" + ndaTemplateUrl + \"\\\"></nta-no-data>\";\n          } else {\n            ndaTemplate = \"<nta-no-data text=\\\"\" + (ndaElement.attr('text')) + \"\\\"></nta-no-data>\";\n          }\n        }\n        pagerElement = element.find('pager');\n        pagerTemplateUrl = pagerElement.attr('template-url');\n        pagerTemplate = \"<nta-pager template-url=\\\"\" + pagerTemplateUrl + \"\\\"></nta-pager>\";\n        loadingElement = element.find('loading');\n        loadingTemplateUrl = loadingElement.attr('template-url');\n        loadingTemplate = \"<nta-loading template-url=\\\"\" + loadingTemplateUrl + \"\\\"></nta-loading>\";\n        return \"<div class=\\\"container-fluid nta-container\\\" ng-show=\\\"tableParams.total()\\\"> <div class=\\\"row\\\"> <div class=\\\"col-md-12\\\"> <div ng-if=\\\"options.pagerOnTop\\\"> \" + pagerTemplate + \" </div> <div class=\\\"nta-content row\\\"> <div class=\\\"panel panel-default\\\"> <table ng-table=\\\"tableParams\\\" class=\\\"table ng-table ng-table-responsive nta-table\\\"> <thead> <tr> \" + (compiledHeaders.join(' ')) + \" </tr> </thead> <tbody> <tr ng-repeat=\\\"item in $data\\\"> \" + (compiledContents.join(' ')) + \" </tr> </tbody> </table> </div> <div ng-show=\\\"loading\\\" class=\\\"nta-loading-container\\\"> \" + loadingTemplate + \" </div> </div> <div ng-if=\\\"options.pagerOnBottom\\\"> \" + pagerTemplate + \" </div> </div> </div> </div> <div ng-show=\\\"!tableParams.total()\\\"> \" + ndaTemplate + \" </div>\";\n      },\n      controller: function($scope, $element, ngTableAsyncDefaults) {\n        $scope.options = _.merge({\n          pagerOnTop: ngTableAsyncDefaults.PAGER_ON_TOP,\n          pagerOnBottom: ngTableAsyncDefaults.PAGER_ON_BOTTOM,\n          firstPage: ngTableAsyncDefaults.FIRST_PAGE,\n          pageSize: ngTableAsyncDefaults.PAGE_SIZE\n        }, $scope.options);\n        $scope.mainScope = $scope;\n        return $scope.tableParams = new ngTableParams({\n          page: $scope.options.firstPage,\n          count: $scope.options.pageSize\n        }, {\n          $scope: $scope,\n          getData: function($defer, params) {\n            var limit, skip;\n            $scope.loading = true;\n            skip = (params.page() - 1) * params.count();\n            limit = params.count();\n            return $scope.options.getPage(skip, limit).then(function(results) {\n              $scope.tableParams.total(results[0]);\n              $defer.resolve(results[1]);\n              return delete $scope.loading;\n            });\n          }\n        });\n      }\n    };\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module;\n\n  module = angular.module('ngTableAsync');\n\n\n  /**\n    @ngdoc       object\n    @name        ngTableAsyncDefaults\n    @module      ngTableAsync\n    @description Default settings for ngTableAsync\n   */\n\n  module.value('ngTableAsyncDefaults', {\n    FIRST_PAGE: 1,\n    PAGE_SIZE: 10,\n    NO_DATA_AVAILABLE_TEXT: 'No available results to show',\n    PAGER_ON_TOP: false,\n    PAGER_ON_BOTTOM: true\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module, parseDialogAttribute;\n\n  module = angular.module('ngTableAsync');\n\n  parseDialogAttribute = function(d) {\n    var dialog;\n    dialog = d && d.templateUrl ? d : void 0;\n    if (_.isUndefined(dialog) || _.isEmpty(dialog.params) || _.isFunction(dialog.params)) {\n      return dialog;\n    }\n    dialog.params = function() {\n      if (_.isEmpty(dialog.params)) {\n        return void 0;\n      }\n    };\n    dialog.params = function(item) {\n      if (_.isObject(dialog.params)) {\n        return dialog.params;\n      }\n    };\n    if (_.isString(dialog.params)) {\n      dialog.params = function(item) {\n        var params;\n        params = {};\n        params[dialog.params] = item;\n        return params;\n      };\n    }\n    dialog.params = function(item) {\n      return {\n        item: item\n      };\n    };\n    return dialog;\n  };\n\n\n  /**\n    @ngdoc    directive\n    @name     ntaAction\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders an action button for ngTableAsync directive\n   */\n\n  module.directive('ntaAction', function() {\n    return {\n      restrict: 'E',\n      scope: true,\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return '_ng_table_async_action.html';\n        }\n      },\n      controller: function($scope, $attrs, $q, $injector) {\n        var $modal, action, dialog, error, method, performAction, performActionWithDialog, ref, reload, triggerAction;\n        action = $scope.options.actions[$attrs.action];\n        method = _.isFunction(action) ? action : action.method;\n        reload = _.isUndefined(action.reload) ? true : action.reload;\n        dialog = parseDialogAttribute(action.dialog);\n        $scope.label = $attrs.label;\n        $scope.size = (ref = $attrs.size) === 'xs' || ref === 'sm' || ref === 'lg' ? \"btn-\" + $attrs.size : '';\n        $scope.style = $attrs.style && $attrs.style !== 'undefined' ? \"btn-\" + $attrs.style : 'btn-default';\n        $scope.icon = $attrs.icon && $attrs.icon !== 'undefined' ? $attrs.icon : void 0;\n        performAction = function(item) {\n          $scope.mainScope.loading = true;\n          return $q.when().then(function() {\n            return method(item);\n          }).then(function() {\n            if (reload) {\n              return $scope.tableParams.reload();\n            }\n          })[\"finally\"](function() {\n            return delete $scope.mainScope.loading;\n          });\n        };\n        if (!_.isEmpty(action.dialog)) {\n          try {\n            $modal = $injector.get('$modal');\n            performActionWithDialog = function(item) {\n              var modalInstance, modalScope, params;\n              params = dialog.params(item);\n              modalScope = _.merge($scope.$new(true), params);\n              modalInstance = $modal.open({\n                templateUrl: dialog.templateUrl,\n                scope: modalScope\n              });\n              return modalInstance.result.then(function() {\n                return performAction(item);\n              })[\"catch\"](function() {\n                if (dialog && dialog.onCancel) {\n                  return dialog.onCancel(item, params);\n                }\n              });\n            };\n            triggerAction = performActionWithDialog;\n          } catch (_error) {\n            error = _error;\n            triggerAction = performAction;\n          }\n        } else {\n          triggerAction = performAction;\n        }\n        return $scope[\"do\"] = function() {\n          return triggerAction($scope.item);\n        };\n      }\n    };\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module;\n\n  module = angular.module('ngTableAsync');\n\n\n  /**\n    @ngdoc    directive\n    @name     ntaLoading\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders the 'loading table' markup for ngTableAsync directive\n   */\n\n  module.directive('ntaLoading', function() {\n    return {\n      restrict: 'E',\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return '_ng_table_async_loading.html';\n        }\n      }\n    };\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module;\n\n  module = angular.module('ngTableAsync');\n\n\n  /**\n    @ngdoc    directive\n    @name     ntaNoData\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders a 'No available data' for ngTableAsync directive\n   */\n\n  module.directive('ntaNoData', function() {\n    return {\n      restrict: 'E',\n      scope: true,\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return '_ng_table_async_no_data.html';\n        }\n      },\n      controller: function($scope, $element, $attrs, ngTableAsyncDefaults) {\n        if (!$attrs.text || $attrs.text === 'undefined') {\n          $attrs.text = ngTableAsyncDefaults.NO_DATA_AVAILABLE_TEXT;\n        }\n        return $scope.text = $attrs.text;\n      }\n    };\n  });\n\n}).call(this);\n\n(function() {\n  'use strict';\n  var module;\n\n  module = angular.module('ngTableAsync');\n\n\n  /**\n    @ngdoc    directive\n    @name     ntaPager\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders a pager for ngTableAsync directive\n   */\n\n  module.directive('ntaPager', function() {\n    return {\n      restrict: 'E',\n      template: function(element, attrs) {\n        if (!attrs.templateUrl || attrs.templateUrl === 'undefined') {\n          attrs.templateUrl = '_ng_table_async_pager.html';\n        }\n        return \"<div ng-table-pagination=\\\"tableParams\\\" template-url=\\\"'\" + attrs.templateUrl + \"'\\\"></div>\";\n      }\n    };\n  });\n\n}).call(this);\n","'use strict'\n\nmodule = angular.module 'ngTableAsync'\n\nparseDialogAttribute = (d) ->\n  dialog = if d and d.templateUrl then d else undefined\n\n  if _.isUndefined(dialog) or _.isEmpty(dialog.params) or _.isFunction(dialog.params)\n    return dialog\n\n  dialog.params =        -> undefined     if _.isEmpty dialog.params\n  dialog.params = (item) -> dialog.params if _.isObject dialog.params\n\n  if _.isString dialog.params\n    dialog.params = (item) ->\n      params = {}\n      params[dialog.params] = item\n      params\n\n  dialog.params = (item) -> item: item\n\n  dialog\n\n###*\n  @ngdoc    directive\n  @name     ntaAction\n  @module   ngTableAsync\n  @restrict E\n  @description\n  Renders an action button for ngTableAsync directive\n###\nmodule.directive 'ntaAction', ->\n  restrict : 'E'\n  scope    : true\n  templateUrl: (element, attrs) ->\n    if attrs.templateUrl and attrs.templateUrl != 'undefined'\n      attrs.templateUrl\n    else\n      '_ng_table_async_action.html'\n\n  controller: ($scope, $attrs, $q, $injector) ->\n    action = $scope.options.actions[$attrs.action]\n    method = if _.isFunction action then action else action.method\n    reload = if _.isUndefined action.reload then true else action.reload\n    dialog = parseDialogAttribute action.dialog\n\n    $scope.label  = $attrs.label\n    $scope.size   = if $attrs.size in [ 'xs', 'sm', 'lg' ] then \"btn-#{$attrs.size}\" else ''\n    $scope.style  = if $attrs.style and $attrs.style != 'undefined' then \"btn-#{$attrs.style}\" else 'btn-default'\n    $scope.icon   = if $attrs.icon and $attrs.icon != 'undefined' then $attrs.icon else undefined\n\n    performAction = (item) ->\n      $scope.mainScope.loading = true\n      $q.when()\n      .then    -> method(item)\n      .then    -> $scope.tableParams.reload() if reload\n      .finally -> delete $scope.mainScope.loading\n\n    if !_.isEmpty action.dialog\n      # Checks if ui.bootstrap.modal is available\n      try\n        $modal = $injector.get '$modal'\n\n        # AngularUI Bootstrap Modal module is available\n        performActionWithDialog = (item) ->\n          params = dialog.params item\n\n          # Launch modal\n          modalScope = _.merge $scope.$new(true), params\n          modalInstance = $modal.open\n            templateUrl : dialog.templateUrl\n            scope       : modalScope\n\n          # Handle result\n          modalInstance.result\n          .then ->\n            performAction item\n          .catch ->\n            if dialog and dialog.onCancel\n              dialog.onCancel item, params\n\n        triggerAction = performActionWithDialog\n\n      catch error\n        # AngularUI Bootstrap Modal module is not available\n        triggerAction = performAction\n    else\n      triggerAction = performAction\n\n    $scope.do = -> triggerAction $scope.item\n","'use strict'\n\nmodule = angular.module 'ngTableAsync'\n\n###*\n  @ngdoc    directive\n  @name     ntaLoading\n  @module   ngTableAsync\n  @restrict E\n  @description\n  Renders the 'loading table' markup for ngTableAsync directive\n###\nmodule.directive 'ntaLoading', ->\n  restrict: 'E'\n  templateUrl: (element, attrs) ->\n    if attrs.templateUrl and attrs.templateUrl != 'undefined'\n      attrs.templateUrl\n    else\n      '_ng_table_async_loading.html'\n","'use strict'\n\nmodule = angular.module 'ngTableAsync'\n\n###*\n  @ngdoc    directive\n  @name     ntaNoData\n  @module   ngTableAsync\n  @restrict E\n  @description\n  Renders a 'No available data' for ngTableAsync directive\n###\nmodule.directive 'ntaNoData', ->\n  restrict : 'E'\n  scope    : true\n  templateUrl: (element, attrs) ->\n    if attrs.templateUrl and attrs.templateUrl != 'undefined'\n      attrs.templateUrl\n    else\n      '_ng_table_async_no_data.html'\n\n  controller: ($scope, $element, $attrs, ngTableAsyncDefaults) ->\n    if !$attrs.text or $attrs.text == 'undefined'\n      $attrs.text = ngTableAsyncDefaults.NO_DATA_AVAILABLE_TEXT\n\n    $scope.text = $attrs.text\n","'use strict'\n\nmodule = angular.module 'ngTableAsync'\n\n###*\n  @ngdoc    directive\n  @name     ntaPager\n  @module   ngTableAsync\n  @restrict E\n  @description\n  Renders a pager for ngTableAsync directive\n###\nmodule.directive 'ntaPager', ->\n  restrict: 'E'\n  template: (element, attrs) ->\n    if !attrs.templateUrl or attrs.templateUrl == 'undefined'\n      attrs.templateUrl = '_ng_table_async_pager.html'\n    \"<div ng-table-pagination=\\\"tableParams\\\" template-url=\\\"'#{attrs.templateUrl}'\\\"></div>\"\n"],"sourceRoot":"/source/"}