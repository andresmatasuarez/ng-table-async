{"version":3,"sources":["index.coffee","index.js"],"names":["app","parseAttribute","parseColumn","parseColumnContent","parseColumnHeader","prepareColumnHtml","angular","module","column","_","map","children","child","element","is","attr","outerHTML","content","contentAttr","contentElement","html","isEmpty","find","join","header","pagerOnTop","v","isUndefined","DEFAULT_PAGER_ON_TOP","pagerOnBottom","DEFAULT_PAGER_ON_BOTTOM","firstPage","DEFAULT_FIRST_PAGE","pageSize","DEFAULT_PAGE_SIZE","actions","dialog","params","p","isFunction","value","FIRST_PAGE","PAGE_SIZE","NO_DATA_AVAILABLE_TEXT","PAGER_ON_TOP","PAGER_ON_BOTTOM","directive","$q","$modal","ngTableParams","restrict","scope","options","template","attrs","columns","compiledContents","compiledHeaders","ndaElement","ndaTemplate","ndaTemplateUrl","pagerElement","pagerTemplate","pagerTemplateUrl","parsedColumns","controller","$scope","$element","merge","action","key","confirmationMethodPromise","method","methodPromise","reload","templateUrl","item","loadingTable","when","then","tableParams","modalInstance","modalScope","$new","open","result","onCancel","object","page","count","getData","$defer","limit","skip","getPage","results","total","resolve","label","size","style","icon","link","ref","text","DEFAULT_NO_DATA_AVAILABLE_TEXT","call","this"],"mappings":"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","file":"index.min.js","sourcesContent":["'use strict'\n\napp = angular.module 'ngTableAsync', [ 'ngTable' ]\n\nprepareColumnHtml = (column) ->\n  _.map column.children(), (child) ->\n    child = angular.element child\n    if child.is 'action'\n      \"<ng-table-async-button\n        label  = \\\"#{child.attr 'label'}\\\"\n        action = \\\"actions.#{child.attr 'perform'}(item)\\\"\n        style  = \\\"#{child.attr 'style'}\\\"\n        size   = \\\"#{child.attr 'size'}\\\"\n        icon   = \\\"#{child.attr 'icon'}\\\">\n      </ng-table-async-button>\"\n    else\n      child[0].outerHTML\n\nparseColumnContent = (column) ->\n  column  = angular.element column\n  content = column.html()\n\n  if content\n    contentElement = if _.isEmpty(column.find('content')) then column else column.find 'content'\n    content        = \"<td>#{ prepareColumnHtml(contentElement).join ' ' }</td>\"\n  else\n    contentAttr = column.attr 'content'\n    content     = if contentAttr then \"<td ng-bind=\\\"#{ contentAttr }\\\"></td>\" else \"<td></td>\"\n\n  content\n\nparseColumnHeader = (column) ->\n  column = angular.element column\n  header = if _.isEmpty(column.attr 'header') then '' else column.attr('header')\n\n  if header\n    header = \"<th ng-bind=\\\"#{ header }\\\"></th>\"\n  else\n    if !_.isEmpty column.find('content')\n      header = column.find('header').html()\n    header = \"<th>#{ header }</th>\"\n\n  header\n\nparseColumn = (column) ->\n  header  : parseColumnHeader  column\n  content : parseColumnContent column\n\nparseAttribute =\n  pagerOnTop    : (v) -> if _.isUndefined v then DEFAULT_PAGER_ON_TOP else v\n  pagerOnBottom : (v) -> if _.isUndefined v then DEFAULT_PAGER_ON_BOTTOM else v\n  firstPage     : (v) -> v || DEFAULT_FIRST_PAGE\n  pageSize      : (v) -> v || DEFAULT_PAGE_SIZE\n  actions:\n    dialog:\n      params: (p) ->\n        return p if _.isFunction p\n\n        return        -> undefined if _.isEmpty p\n        return (item) -> p         if _.isObject p\n\n        if _.isString p\n          return (item) ->\n            params = {}\n            params[p] = item\n            params\n\n        # Default\n        (item) -> item: item\n\n###*\n  @ngdoc       object\n  @name        ngTableAsyncDefaults\n  @module      ngTableAsync\n  @description Default settings for ngTableAsync\n###\napp.value 'ngTableAsyncDefaults',\n  FIRST_PAGE             : 1\n  PAGE_SIZE              : 10\n  NO_DATA_AVAILABLE_TEXT : \"No available results to show\"\n  PAGER_ON_TOP           : false\n  PAGER_ON_BOTTOM        : true\n\n###*\n  @ngdoc    directive\n  @name     ngTableAsync\n  @module   ngTableAsync\n  @restrict E\n  @description\n  ngTable wrapper directive that offers some basic functionality for working with asynchronous tables.\n###\napp.directive 'ngTableAsync', ($q, $modal, ngTableParams) ->\n  restrict: 'E'\n  scope:\n    options: '='\n\n  template: (element, attrs) ->\n    columns          = element.find 'column'\n    parsedColumns    = _.map columns, parseColumn\n    compiledHeaders  = _.map parsedColumns, 'header'\n    compiledContents = _.map parsedColumns, 'content'\n\n    # Determine 'No Data Available' template\n    ndaElement = element.find 'no-data-available'\n    ndaTemplate = ndaElement.html()\n    if !ndaTemplate\n      ndaTemplateUrl = ndaElement.attr 'template-url'\n      if ndaTemplateUrl\n        ndaTemplate = \"<ng-table-async-no-data-available template-url=\\\"#{ndaTemplateUrl}\\\"></ng-table-async-no-data-available>\"\n      else\n        ndaTemplate = \"<ng-table-async-no-data-available text=\\\"#{ndaElement.attr 'text'}\\\"></ng-table-async-no-data-available>\"\n\n    # Determine pager template\n    pagerElement     = element.find 'pager'\n    pagerTemplateUrl = pagerElement.attr 'template-url'\n    pagerTemplate    = \"<ng-table-async-pager template-url=\\\"#{pagerTemplateUrl}\\\"></ng-table-async-pager>\"\n\n    # Tried to extract this template to a separate file\n    # but there is no blocking way to load it.\n    # Sadly, this function cannot return a promise, so\n    # the $templateRequest alternative becomes useless.\n    \"\n    <div class=\\\"container table-container\\\" ng-show=\\\"tableParams.total()\\\">\n      <div class=\\\"row\\\">\n        <div class=\\\"col-md-12\\\">\n\n          <div ng-if=\\\"options.pagerOnTop\\\">\n            #{ pagerTemplate }\n          </div>\n\n          <div class=\\\"table-content row\\\">\n            <div class=\\\"panel panel-default\\\">\n              <table ng-table=\\\"tableParams\\\" class=\\\"table ng-table ng-table-responsive\\\">\n                <thead>\n                  <tr>\n                    #{ compiledHeaders.join(' ') }\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr ng-repeat=\\\"item in $data\\\">\n                    #{ compiledContents.join(' ') }\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            <div ng-show=\\\"loadingTable\\\" class=\\\"loadingTable text-center\\\">\n              <i class=\\\"fa fa-spin fa-4x fa-spinner\\\"></i>\n            </div>\n          </div>\n\n          <div ng-if=\\\"options.pagerOnBottom\\\">\n            #{ pagerTemplate }\n          </div>\n\n        </div>\n      </div>\n\n    </div>\n\n    <div ng-show=\\\"!tableParams.total()\\\">\n      #{ ndaTemplate }\n    </div>\n\n    \"\n\n  controller: ($scope, $element) ->\n    $scope.options = _.merge\n      pagerOnTop         : DEFAULT_PAGER_ON_TOP\n      pagerOnBottom      : DEFAULT_PAGER_ON_BOTTOM\n      firstPage          : DEFAULT_FIRST_PAGE\n      pageSize           : DEFAULT_PAGE_SIZE\n    , $scope.options\n\n    # Preprocess actions\n    $scope.actions = _.map $scope.options.actions, (action, key) ->\n      method = if _.isFunction action then action else action.method\n      reload = if _.isUndefined action.reload then true else action.reload\n      dialog = if action.dialog and action.dialog.templateUrl then action.dialog else undefined\n\n      methodPromise = (item) ->\n        $scope.loadingTable = true\n        $q.when()\n        .then -> method(item)\n        .then ->\n          $scope.tableParams.reload() if reload\n        .finally ->\n          delete $scope.loadingTable\n\n      return [ key, methodPromise ] if !dialog\n\n      confirmationMethodPromise = (item) ->\n        params = parseAttribute.actions.dialog.params(dialog.params) item\n\n        # Launch modal\n        modalScope = _.merge $scope.$new(true), params\n        modalInstance = $modal.open\n          templateUrl : action.dialog.templateUrl\n          scope       : modalScope\n\n        # Handle result\n        modalInstance.result\n        .then ->\n          methodPromise(item)\n        .catch ->\n          if action.dialog and action.dialog.onCancel\n            action.dialog.onCancel item, params\n\n      [ key, confirmationMethodPromise ]\n\n    $scope.actions = _.object $scope.actions\n\n    $scope.tableParams = new ngTableParams\n      page  : $scope.options.firstPage\n      count : $scope.options.pageSize\n    ,\n      # '$scope: $scope' line added to avoid\n      # \"TypeError: Cannot read property '$on' of null\"\n      # src: https://github.com/esvit/ng-table/issues/182\n      $scope: $scope\n\n      getData: ($defer, params) ->\n        $scope.loadingTable = true\n\n        skip = (params.page() - 1) * params.count()\n        limit = params.count()\n\n        $scope.options.getPage skip, limit\n        .then (results) ->\n          $scope.tableParams.total results[0]\n          $defer.resolve results[1]\n          delete $scope.loadingTable\n\n###*\n  @ngdoc    directive\n  @name     ngTableAsyncTableButton\n  @module   ngTableAsync\n  @restrict E\n  @description\n  Renders an action button for ngTableAsync directive\n###\napp.directive 'ngTableAsyncButton', ->\n  restrict: 'E'\n  scope:\n    action : '&'\n    label  : '='\n    size   : '@'\n    style  : '@'\n    icon   : '@'\n  templateUrl: (element, attrs) ->\n    if attrs.templateUrl and attrs.templateUrl != 'undefined'\n      attrs.templateUrl\n    else\n      'partials/_ng_table_async_button.html'\n\n  link: (scope, element, attrs) ->\n    attrs.size  = if attrs.size in [ 'xs', 'sm', 'lg' ] then \"btn-#{attrs.size}\" else ''\n    attrs.style = if attrs.style and attrs.style != 'undefined' then \"btn-#{attrs.style}\" else 'btn-default'\n    attrs.icon  = if attrs.icon and attrs.icon != 'undefined' then attrs.icon else undefined\n\n###*\n  @ngdoc    directive\n  @name     ngTableAsyncNoDataAvailable\n  @module   ngTableAsync\n  @restrict E\n  @description\n  Renders a 'No available data' for ngTableAsync directive\n###\napp.directive 'ngTableAsyncNoDataAvailable', ->\n  restrict: 'E'\n  templateUrl: (element, attrs) ->\n    if attrs.templateUrl and attrs.templateUrl != 'undefined'\n      attrs.templateUrl\n    else\n      'partials/_ng_table_async_no_data_available.html'\n\n  link: (scope, element, attrs) ->\n    if !attrs.text or attrs.text == 'undefined'\n      attrs.text = DEFAULT_NO_DATA_AVAILABLE_TEXT\n\n    scope.text = attrs.text\n\n###*\n  @ngdoc    directive\n  @name     ngTableAsyncPager\n  @module   ngTableAsync\n  @restrict E\n  @description\n  Renders a pager for ngTableAsync directive\n###\napp.directive 'ngTableAsyncPager', ->\n  restrict: 'E'\n  template: (element, attrs) ->\n    if !attrs.templateUrl or attrs.templateUrl == 'undefined'\n      attrs.templateUrl = 'partials/_ng_table_async_pager.html'\n    \"<div ng-table-pagination=\\\"tableParams\\\" template-url=\\\"'#{attrs.templateUrl}'\\\"></div>\"\n\n","(function() {\n  'use strict';\n  var app, parseAttribute, parseColumn, parseColumnContent, parseColumnHeader, prepareColumnHtml;\n\n  app = angular.module('ngTableAsync', ['ngTable']);\n\n  prepareColumnHtml = function(column) {\n    return _.map(column.children(), function(child) {\n      child = angular.element(child);\n      if (child.is('action')) {\n        return \"<ng-table-async-button label  = \\\"\" + (child.attr('label')) + \"\\\" action = \\\"actions.\" + (child.attr('perform')) + \"(item)\\\" style  = \\\"\" + (child.attr('style')) + \"\\\" size   = \\\"\" + (child.attr('size')) + \"\\\" icon   = \\\"\" + (child.attr('icon')) + \"\\\"> </ng-table-async-button>\";\n      } else {\n        return child[0].outerHTML;\n      }\n    });\n  };\n\n  parseColumnContent = function(column) {\n    var content, contentAttr, contentElement;\n    column = angular.element(column);\n    content = column.html();\n    if (content) {\n      contentElement = _.isEmpty(column.find('content')) ? column : column.find('content');\n      content = \"<td>\" + (prepareColumnHtml(contentElement).join(' ')) + \"</td>\";\n    } else {\n      contentAttr = column.attr('content');\n      content = contentAttr ? \"<td ng-bind=\\\"\" + contentAttr + \"\\\"></td>\" : \"<td></td>\";\n    }\n    return content;\n  };\n\n  parseColumnHeader = function(column) {\n    var header;\n    column = angular.element(column);\n    header = _.isEmpty(column.attr('header')) ? '' : column.attr('header');\n    if (header) {\n      header = \"<th ng-bind=\\\"\" + header + \"\\\"></th>\";\n    } else {\n      if (!_.isEmpty(column.find('content'))) {\n        header = column.find('header').html();\n      }\n      header = \"<th>\" + header + \"</th>\";\n    }\n    return header;\n  };\n\n  parseColumn = function(column) {\n    return {\n      header: parseColumnHeader(column),\n      content: parseColumnContent(column)\n    };\n  };\n\n  parseAttribute = {\n    pagerOnTop: function(v) {\n      if (_.isUndefined(v)) {\n        return DEFAULT_PAGER_ON_TOP;\n      } else {\n        return v;\n      }\n    },\n    pagerOnBottom: function(v) {\n      if (_.isUndefined(v)) {\n        return DEFAULT_PAGER_ON_BOTTOM;\n      } else {\n        return v;\n      }\n    },\n    firstPage: function(v) {\n      return v || DEFAULT_FIRST_PAGE;\n    },\n    pageSize: function(v) {\n      return v || DEFAULT_PAGE_SIZE;\n    },\n    actions: {\n      dialog: {\n        params: function(p) {\n          if (_.isFunction(p)) {\n            return p;\n          }\n          return function() {\n            if (_.isEmpty(p)) {\n              return void 0;\n            }\n          };\n          return function(item) {\n            if (_.isObject(p)) {\n              return p;\n            }\n          };\n          if (_.isString(p)) {\n            return function(item) {\n              var params;\n              params = {};\n              params[p] = item;\n              return params;\n            };\n          }\n          return function(item) {\n            return {\n              item: item\n            };\n          };\n        }\n      }\n    }\n  };\n\n\n  /**\n    @ngdoc       object\n    @name        ngTableAsyncDefaults\n    @module      ngTableAsync\n    @description Default settings for ngTableAsync\n   */\n\n  app.value('ngTableAsyncDefaults', {\n    FIRST_PAGE: 1,\n    PAGE_SIZE: 10,\n    NO_DATA_AVAILABLE_TEXT: \"No available results to show\",\n    PAGER_ON_TOP: false,\n    PAGER_ON_BOTTOM: true\n  });\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsync\n    @module   ngTableAsync\n    @restrict E\n    @description\n    ngTable wrapper directive that offers some basic functionality for working with asynchronous tables.\n   */\n\n  app.directive('ngTableAsync', function($q, $modal, ngTableParams) {\n    return {\n      restrict: 'E',\n      scope: {\n        options: '='\n      },\n      template: function(element, attrs) {\n        var columns, compiledContents, compiledHeaders, ndaElement, ndaTemplate, ndaTemplateUrl, pagerElement, pagerTemplate, pagerTemplateUrl, parsedColumns;\n        columns = element.find('column');\n        parsedColumns = _.map(columns, parseColumn);\n        compiledHeaders = _.map(parsedColumns, 'header');\n        compiledContents = _.map(parsedColumns, 'content');\n        ndaElement = element.find('no-data-available');\n        ndaTemplate = ndaElement.html();\n        if (!ndaTemplate) {\n          ndaTemplateUrl = ndaElement.attr('template-url');\n          if (ndaTemplateUrl) {\n            ndaTemplate = \"<ng-table-async-no-data-available template-url=\\\"\" + ndaTemplateUrl + \"\\\"></ng-table-async-no-data-available>\";\n          } else {\n            ndaTemplate = \"<ng-table-async-no-data-available text=\\\"\" + (ndaElement.attr('text')) + \"\\\"></ng-table-async-no-data-available>\";\n          }\n        }\n        pagerElement = element.find('pager');\n        pagerTemplateUrl = pagerElement.attr('template-url');\n        pagerTemplate = \"<ng-table-async-pager template-url=\\\"\" + pagerTemplateUrl + \"\\\"></ng-table-async-pager>\";\n        return \"<div class=\\\"container table-container\\\" ng-show=\\\"tableParams.total()\\\"> <div class=\\\"row\\\"> <div class=\\\"col-md-12\\\"> <div ng-if=\\\"options.pagerOnTop\\\"> \" + pagerTemplate + \" </div> <div class=\\\"table-content row\\\"> <div class=\\\"panel panel-default\\\"> <table ng-table=\\\"tableParams\\\" class=\\\"table ng-table ng-table-responsive\\\"> <thead> <tr> \" + (compiledHeaders.join(' ')) + \" </tr> </thead> <tbody> <tr ng-repeat=\\\"item in $data\\\"> \" + (compiledContents.join(' ')) + \" </tr> </tbody> </table> </div> <div ng-show=\\\"loadingTable\\\" class=\\\"loadingTable text-center\\\"> <i class=\\\"fa fa-spin fa-4x fa-spinner\\\"></i> </div> </div> <div ng-if=\\\"options.pagerOnBottom\\\"> \" + pagerTemplate + \" </div> </div> </div> </div> <div ng-show=\\\"!tableParams.total()\\\"> \" + ndaTemplate + \" </div>\";\n      },\n      controller: function($scope, $element) {\n        $scope.options = _.merge({\n          pagerOnTop: DEFAULT_PAGER_ON_TOP,\n          pagerOnBottom: DEFAULT_PAGER_ON_BOTTOM,\n          firstPage: DEFAULT_FIRST_PAGE,\n          pageSize: DEFAULT_PAGE_SIZE\n        }, $scope.options);\n        $scope.actions = _.map($scope.options.actions, function(action, key) {\n          var confirmationMethodPromise, dialog, method, methodPromise, reload;\n          method = _.isFunction(action) ? action : action.method;\n          reload = _.isUndefined(action.reload) ? true : action.reload;\n          dialog = action.dialog && action.dialog.templateUrl ? action.dialog : void 0;\n          methodPromise = function(item) {\n            $scope.loadingTable = true;\n            return $q.when().then(function() {\n              return method(item);\n            }).then(function() {\n              if (reload) {\n                return $scope.tableParams.reload();\n              }\n            })[\"finally\"](function() {\n              return delete $scope.loadingTable;\n            });\n          };\n          if (!dialog) {\n            return [key, methodPromise];\n          }\n          confirmationMethodPromise = function(item) {\n            var modalInstance, modalScope, params;\n            params = parseAttribute.actions.dialog.params(dialog.params)(item);\n            modalScope = _.merge($scope.$new(true), params);\n            modalInstance = $modal.open({\n              templateUrl: action.dialog.templateUrl,\n              scope: modalScope\n            });\n            return modalInstance.result.then(function() {\n              return methodPromise(item);\n            })[\"catch\"](function() {\n              if (action.dialog && action.dialog.onCancel) {\n                return action.dialog.onCancel(item, params);\n              }\n            });\n          };\n          return [key, confirmationMethodPromise];\n        });\n        $scope.actions = _.object($scope.actions);\n        return $scope.tableParams = new ngTableParams({\n          page: $scope.options.firstPage,\n          count: $scope.options.pageSize\n        }, {\n          $scope: $scope,\n          getData: function($defer, params) {\n            var limit, skip;\n            $scope.loadingTable = true;\n            skip = (params.page() - 1) * params.count();\n            limit = params.count();\n            return $scope.options.getPage(skip, limit).then(function(results) {\n              $scope.tableParams.total(results[0]);\n              $defer.resolve(results[1]);\n              return delete $scope.loadingTable;\n            });\n          }\n        });\n      }\n    };\n  });\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsyncTableButton\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders an action button for ngTableAsync directive\n   */\n\n  app.directive('ngTableAsyncButton', function() {\n    return {\n      restrict: 'E',\n      scope: {\n        action: '&',\n        label: '=',\n        size: '@',\n        style: '@',\n        icon: '@'\n      },\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return 'partials/_ng_table_async_button.html';\n        }\n      },\n      link: function(scope, element, attrs) {\n        var ref;\n        attrs.size = (ref = attrs.size) === 'xs' || ref === 'sm' || ref === 'lg' ? \"btn-\" + attrs.size : '';\n        attrs.style = attrs.style && attrs.style !== 'undefined' ? \"btn-\" + attrs.style : 'btn-default';\n        return attrs.icon = attrs.icon && attrs.icon !== 'undefined' ? attrs.icon : void 0;\n      }\n    };\n  });\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsyncNoDataAvailable\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders a 'No available data' for ngTableAsync directive\n   */\n\n  app.directive('ngTableAsyncNoDataAvailable', function() {\n    return {\n      restrict: 'E',\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return 'partials/_ng_table_async_no_data_available.html';\n        }\n      },\n      link: function(scope, element, attrs) {\n        if (!attrs.text || attrs.text === 'undefined') {\n          attrs.text = DEFAULT_NO_DATA_AVAILABLE_TEXT;\n        }\n        return scope.text = attrs.text;\n      }\n    };\n  });\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsyncPager\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders a pager for ngTableAsync directive\n   */\n\n  app.directive('ngTableAsyncPager', function() {\n    return {\n      restrict: 'E',\n      template: function(element, attrs) {\n        if (!attrs.templateUrl || attrs.templateUrl === 'undefined') {\n          attrs.templateUrl = 'partials/_ng_table_async_pager.html';\n        }\n        return \"<div ng-table-pagination=\\\"tableParams\\\" template-url=\\\"'\" + attrs.templateUrl + \"'\\\"></div>\";\n      }\n    };\n  });\n\n}).call(this);\n"],"sourceRoot":"/source/"}