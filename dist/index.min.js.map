{"version":3,"sources":["index.js","index.coffee"],"names":["app","parseAttribute","parseColumn","parseColumnContent","parseColumnHeader","prepareColumnHtml","angular","module","column","_","map","children","child","element","is","attr","outerHTML","content","contentAttr","contentElement","html","isEmpty","find","join","header","pagerOnTop","v","isUndefined","DEFAULT_PAGER_ON_TOP","pagerOnBottom","DEFAULT_PAGER_ON_BOTTOM","firstPage","DEFAULT_FIRST_PAGE","pageSize","DEFAULT_PAGE_SIZE","actions","dialog","params","p","isFunction","value","FIRST_PAGE","PAGE_SIZE","NO_DATA_AVAILABLE_TEXT","PAGER_ON_TOP","PAGER_ON_BOTTOM","directive","$q","$modal","ngTableParams","restrict","scope","options","template","attrs","columns","compiledContents","compiledHeaders","ndaElement","ndaTemplate","ndaTemplateUrl","pagerElement","pagerTemplate","pagerTemplateUrl","parsedColumns","controller","$scope","$element","merge","action","key","confirmationMethodPromise","method","methodPromise","reload","templateUrl","item","loadingTable","when","then","tableParams","modalInstance","modalScope","$new","open","result","onCancel","object","page","count","getData","$defer","limit","skip","getPage","results","total","resolve","label","size","style","icon","link","ref","text","DEFAULT_NO_DATA_AVAILABLE_TEXT","call","this"],"mappings":"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","file":"index.min.js","sourcesContent":["/**\n * ng-table-async\n * ngTable wrapper that offers some basic functionality and abstractions for working with asynchronous tables.\n * @author  Andrés Mata Suárez <amatasuarez@gmail.com>\n * @version 0.0.0\n * @link    https://github.com/andresmatasuarez/ng-table-async\n * @license MIT\n */\n(function() {\n  'use strict';\n  var app, parseAttribute, parseColumn, parseColumnContent, parseColumnHeader, prepareColumnHtml;\n\n  app = angular.module('ngTableAsync', ['ngTable']);\n\n  prepareColumnHtml = function(column) {\n    return _.map(column.children(), function(child) {\n      child = angular.element(child);\n      if (child.is('action')) {\n        return \"<ng-table-async-button label  = \\\"\" + (child.attr('label')) + \"\\\" action = \\\"actions.\" + (child.attr('perform')) + \"(item)\\\" style  = \\\"\" + (child.attr('style')) + \"\\\" size   = \\\"\" + (child.attr('size')) + \"\\\" icon   = \\\"\" + (child.attr('icon')) + \"\\\"> </ng-table-async-button>\";\n      } else {\n        return child[0].outerHTML;\n      }\n    });\n  };\n\n  parseColumnContent = function(column) {\n    var content, contentAttr, contentElement;\n    column = angular.element(column);\n    content = column.html();\n    if (content) {\n      contentElement = _.isEmpty(column.find('content')) ? column : column.find('content');\n      content = \"<td>\" + (prepareColumnHtml(contentElement).join(' ')) + \"</td>\";\n    } else {\n      contentAttr = column.attr('content');\n      content = contentAttr ? \"<td ng-bind=\\\"\" + contentAttr + \"\\\"></td>\" : \"<td></td>\";\n    }\n    return content;\n  };\n\n  parseColumnHeader = function(column) {\n    var header;\n    column = angular.element(column);\n    header = _.isEmpty(column.attr('header')) ? '' : column.attr('header');\n    if (header) {\n      header = \"<th ng-bind=\\\"\" + header + \"\\\"></th>\";\n    } else {\n      if (!_.isEmpty(column.find('content'))) {\n        header = column.find('header').html();\n      }\n      header = \"<th>\" + header + \"</th>\";\n    }\n    return header;\n  };\n\n  parseColumn = function(column) {\n    return {\n      header: parseColumnHeader(column),\n      content: parseColumnContent(column)\n    };\n  };\n\n  parseAttribute = {\n    pagerOnTop: function(v) {\n      if (_.isUndefined(v)) {\n        return DEFAULT_PAGER_ON_TOP;\n      } else {\n        return v;\n      }\n    },\n    pagerOnBottom: function(v) {\n      if (_.isUndefined(v)) {\n        return DEFAULT_PAGER_ON_BOTTOM;\n      } else {\n        return v;\n      }\n    },\n    firstPage: function(v) {\n      return v || DEFAULT_FIRST_PAGE;\n    },\n    pageSize: function(v) {\n      return v || DEFAULT_PAGE_SIZE;\n    },\n    actions: {\n      dialog: {\n        params: function(p) {\n          if (_.isFunction(p)) {\n            return p;\n          }\n          return function() {\n            if (_.isEmpty(p)) {\n              return void 0;\n            }\n          };\n          return function(item) {\n            if (_.isObject(p)) {\n              return p;\n            }\n          };\n          if (_.isString(p)) {\n            return function(item) {\n              var params;\n              params = {};\n              params[p] = item;\n              return params;\n            };\n          }\n          return function(item) {\n            return {\n              item: item\n            };\n          };\n        }\n      }\n    }\n  };\n\n\n  /**\n    @ngdoc       object\n    @name        ngTableAsyncDefaults\n    @module      ngTableAsync\n    @description Default settings for ngTableAsync\n   */\n\n  app.value('ngTableAsyncDefaults', {\n    FIRST_PAGE: 1,\n    PAGE_SIZE: 10,\n    NO_DATA_AVAILABLE_TEXT: \"No available results to show\",\n    PAGER_ON_TOP: false,\n    PAGER_ON_BOTTOM: true\n  });\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsync\n    @module   ngTableAsync\n    @restrict E\n    @description\n    ngTable wrapper directive that offers some basic functionality for working with asynchronous tables.\n   */\n\n  app.directive('ngTableAsync', function($q, $modal, ngTableParams) {\n    return {\n      restrict: 'E',\n      scope: {\n        options: '='\n      },\n      template: function(element, attrs) {\n        var columns, compiledContents, compiledHeaders, ndaElement, ndaTemplate, ndaTemplateUrl, pagerElement, pagerTemplate, pagerTemplateUrl, parsedColumns;\n        columns = element.find('column');\n        parsedColumns = _.map(columns, parseColumn);\n        compiledHeaders = _.map(parsedColumns, 'header');\n        compiledContents = _.map(parsedColumns, 'content');\n        ndaElement = element.find('no-data-available');\n        ndaTemplate = ndaElement.html();\n        if (!ndaTemplate) {\n          ndaTemplateUrl = ndaElement.attr('template-url');\n          if (ndaTemplateUrl) {\n            ndaTemplate = \"<ng-table-async-no-data-available template-url=\\\"\" + ndaTemplateUrl + \"\\\"></ng-table-async-no-data-available>\";\n          } else {\n            ndaTemplate = \"<ng-table-async-no-data-available text=\\\"\" + (ndaElement.attr('text')) + \"\\\"></ng-table-async-no-data-available>\";\n          }\n        }\n        pagerElement = element.find('pager');\n        pagerTemplateUrl = pagerElement.attr('template-url');\n        pagerTemplate = \"<ng-table-async-pager template-url=\\\"\" + pagerTemplateUrl + \"\\\"></ng-table-async-pager>\";\n        return \"<div class=\\\"container table-container\\\" ng-show=\\\"tableParams.total()\\\"> <div class=\\\"row\\\"> <div class=\\\"col-md-12\\\"> <div ng-if=\\\"options.pagerOnTop\\\"> \" + pagerTemplate + \" </div> <div class=\\\"table-content row\\\"> <div class=\\\"panel panel-default\\\"> <table ng-table=\\\"tableParams\\\" class=\\\"table ng-table ng-table-responsive\\\"> <thead> <tr> \" + (compiledHeaders.join(' ')) + \" </tr> </thead> <tbody> <tr ng-repeat=\\\"item in $data\\\"> \" + (compiledContents.join(' ')) + \" </tr> </tbody> </table> </div> <div ng-show=\\\"loadingTable\\\" class=\\\"loadingTable text-center\\\"> <i class=\\\"fa fa-spin fa-4x fa-spinner\\\"></i> </div> </div> <div ng-if=\\\"options.pagerOnBottom\\\"> \" + pagerTemplate + \" </div> </div> </div> </div> <div ng-show=\\\"!tableParams.total()\\\"> \" + ndaTemplate + \" </div>\";\n      },\n      controller: function($scope, $element) {\n        $scope.options = _.merge({\n          pagerOnTop: DEFAULT_PAGER_ON_TOP,\n          pagerOnBottom: DEFAULT_PAGER_ON_BOTTOM,\n          firstPage: DEFAULT_FIRST_PAGE,\n          pageSize: DEFAULT_PAGE_SIZE\n        }, $scope.options);\n        $scope.actions = _.map($scope.options.actions, function(action, key) {\n          var confirmationMethodPromise, dialog, method, methodPromise, reload;\n          method = _.isFunction(action) ? action : action.method;\n          reload = _.isUndefined(action.reload) ? true : action.reload;\n          dialog = action.dialog && action.dialog.templateUrl ? action.dialog : void 0;\n          methodPromise = function(item) {\n            $scope.loadingTable = true;\n            return $q.when().then(function() {\n              return method(item);\n            }).then(function() {\n              if (reload) {\n                return $scope.tableParams.reload();\n              }\n            })[\"finally\"](function() {\n              return delete $scope.loadingTable;\n            });\n          };\n          if (!dialog) {\n            return [key, methodPromise];\n          }\n          confirmationMethodPromise = function(item) {\n            var modalInstance, modalScope, params;\n            params = parseAttribute.actions.dialog.params(dialog.params)(item);\n            modalScope = _.merge($scope.$new(true), params);\n            modalInstance = $modal.open({\n              templateUrl: action.dialog.templateUrl,\n              scope: modalScope\n            });\n            return modalInstance.result.then(function() {\n              return methodPromise(item);\n            })[\"catch\"](function() {\n              if (action.dialog && action.dialog.onCancel) {\n                return action.dialog.onCancel(item, params);\n              }\n            });\n          };\n          return [key, confirmationMethodPromise];\n        });\n        $scope.actions = _.object($scope.actions);\n        return $scope.tableParams = new ngTableParams({\n          page: $scope.options.firstPage,\n          count: $scope.options.pageSize\n        }, {\n          $scope: $scope,\n          getData: function($defer, params) {\n            var limit, skip;\n            $scope.loadingTable = true;\n            skip = (params.page() - 1) * params.count();\n            limit = params.count();\n            return $scope.options.getPage(skip, limit).then(function(results) {\n              $scope.tableParams.total(results[0]);\n              $defer.resolve(results[1]);\n              return delete $scope.loadingTable;\n            });\n          }\n        });\n      }\n    };\n  });\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsyncTableButton\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders an action button for ngTableAsync directive\n   */\n\n  app.directive('ngTableAsyncButton', function() {\n    return {\n      restrict: 'E',\n      scope: {\n        action: '&',\n        label: '=',\n        size: '@',\n        style: '@',\n        icon: '@'\n      },\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return 'partials/_ng_table_async_button.html';\n        }\n      },\n      link: function(scope, element, attrs) {\n        var ref;\n        attrs.size = (ref = attrs.size) === 'xs' || ref === 'sm' || ref === 'lg' ? \"btn-\" + attrs.size : '';\n        attrs.style = attrs.style && attrs.style !== 'undefined' ? \"btn-\" + attrs.style : 'btn-default';\n        return attrs.icon = attrs.icon && attrs.icon !== 'undefined' ? attrs.icon : void 0;\n      }\n    };\n  });\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsyncNoDataAvailable\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders a 'No available data' for ngTableAsync directive\n   */\n\n  app.directive('ngTableAsyncNoDataAvailable', function() {\n    return {\n      restrict: 'E',\n      templateUrl: function(element, attrs) {\n        if (attrs.templateUrl && attrs.templateUrl !== 'undefined') {\n          return attrs.templateUrl;\n        } else {\n          return 'partials/_ng_table_async_no_data_available.html';\n        }\n      },\n      link: function(scope, element, attrs) {\n        if (!attrs.text || attrs.text === 'undefined') {\n          attrs.text = DEFAULT_NO_DATA_AVAILABLE_TEXT;\n        }\n        return scope.text = attrs.text;\n      }\n    };\n  });\n\n\n  /**\n    @ngdoc    directive\n    @name     ngTableAsyncPager\n    @module   ngTableAsync\n    @restrict E\n    @description\n    Renders a pager for ngTableAsync directive\n   */\n\n  app.directive('ngTableAsyncPager', function() {\n    return {\n      restrict: 'E',\n      template: function(element, attrs) {\n        if (!attrs.templateUrl || attrs.templateUrl === 'undefined') {\n          attrs.templateUrl = 'partials/_ng_table_async_pager.html';\n        }\n        return \"<div ng-table-pagination=\\\"tableParams\\\" template-url=\\\"'\" + attrs.templateUrl + \"'\\\"></div>\";\n      }\n    };\n  });\n\n}).call(this);\n","'use strict'\r\n\r\napp = angular.module 'ngTableAsync', [ 'ngTable' ]\r\n\r\nprepareColumnHtml = (column) ->\r\n  _.map column.children(), (child) ->\r\n    child = angular.element child\r\n    if child.is 'action'\r\n      \"<ng-table-async-button\r\n        label  = \\\"#{child.attr 'label'}\\\"\r\n        action = \\\"actions.#{child.attr 'perform'}(item)\\\"\r\n        style  = \\\"#{child.attr 'style'}\\\"\r\n        size   = \\\"#{child.attr 'size'}\\\"\r\n        icon   = \\\"#{child.attr 'icon'}\\\">\r\n      </ng-table-async-button>\"\r\n    else\r\n      child[0].outerHTML\r\n\r\nparseColumnContent = (column) ->\r\n  column  = angular.element column\r\n  content = column.html()\r\n\r\n  if content\r\n    contentElement = if _.isEmpty(column.find('content')) then column else column.find 'content'\r\n    content        = \"<td>#{ prepareColumnHtml(contentElement).join ' ' }</td>\"\r\n  else\r\n    contentAttr = column.attr 'content'\r\n    content     = if contentAttr then \"<td ng-bind=\\\"#{ contentAttr }\\\"></td>\" else \"<td></td>\"\r\n\r\n  content\r\n\r\nparseColumnHeader = (column) ->\r\n  column = angular.element column\r\n  header = if _.isEmpty(column.attr 'header') then '' else column.attr('header')\r\n\r\n  if header\r\n    header = \"<th ng-bind=\\\"#{ header }\\\"></th>\"\r\n  else\r\n    if !_.isEmpty column.find('content')\r\n      header = column.find('header').html()\r\n    header = \"<th>#{ header }</th>\"\r\n\r\n  header\r\n\r\nparseColumn = (column) ->\r\n  header  : parseColumnHeader  column\r\n  content : parseColumnContent column\r\n\r\nparseAttribute =\r\n  pagerOnTop    : (v) -> if _.isUndefined v then DEFAULT_PAGER_ON_TOP else v\r\n  pagerOnBottom : (v) -> if _.isUndefined v then DEFAULT_PAGER_ON_BOTTOM else v\r\n  firstPage     : (v) -> v || DEFAULT_FIRST_PAGE\r\n  pageSize      : (v) -> v || DEFAULT_PAGE_SIZE\r\n  actions:\r\n    dialog:\r\n      params: (p) ->\r\n        return p if _.isFunction p\r\n\r\n        return        -> undefined if _.isEmpty p\r\n        return (item) -> p         if _.isObject p\r\n\r\n        if _.isString p\r\n          return (item) ->\r\n            params = {}\r\n            params[p] = item\r\n            params\r\n\r\n        # Default\r\n        (item) -> item: item\r\n\r\n###*\r\n  @ngdoc       object\r\n  @name        ngTableAsyncDefaults\r\n  @module      ngTableAsync\r\n  @description Default settings for ngTableAsync\r\n###\r\napp.value 'ngTableAsyncDefaults',\r\n  FIRST_PAGE             : 1\r\n  PAGE_SIZE              : 10\r\n  NO_DATA_AVAILABLE_TEXT : \"No available results to show\"\r\n  PAGER_ON_TOP           : false\r\n  PAGER_ON_BOTTOM        : true\r\n\r\n###*\r\n  @ngdoc    directive\r\n  @name     ngTableAsync\r\n  @module   ngTableAsync\r\n  @restrict E\r\n  @description\r\n  ngTable wrapper directive that offers some basic functionality for working with asynchronous tables.\r\n###\r\napp.directive 'ngTableAsync', ($q, $modal, ngTableParams) ->\r\n  restrict: 'E'\r\n  scope:\r\n    options: '='\r\n\r\n  template: (element, attrs) ->\r\n    columns          = element.find 'column'\r\n    parsedColumns    = _.map columns, parseColumn\r\n    compiledHeaders  = _.map parsedColumns, 'header'\r\n    compiledContents = _.map parsedColumns, 'content'\r\n\r\n    # Determine 'No Data Available' template\r\n    ndaElement = element.find 'no-data-available'\r\n    ndaTemplate = ndaElement.html()\r\n    if !ndaTemplate\r\n      ndaTemplateUrl = ndaElement.attr 'template-url'\r\n      if ndaTemplateUrl\r\n        ndaTemplate = \"<ng-table-async-no-data-available template-url=\\\"#{ndaTemplateUrl}\\\"></ng-table-async-no-data-available>\"\r\n      else\r\n        ndaTemplate = \"<ng-table-async-no-data-available text=\\\"#{ndaElement.attr 'text'}\\\"></ng-table-async-no-data-available>\"\r\n\r\n    # Determine pager template\r\n    pagerElement     = element.find 'pager'\r\n    pagerTemplateUrl = pagerElement.attr 'template-url'\r\n    pagerTemplate    = \"<ng-table-async-pager template-url=\\\"#{pagerTemplateUrl}\\\"></ng-table-async-pager>\"\r\n\r\n    # Tried to extract this template to a separate file\r\n    # but there is no blocking way to load it.\r\n    # Sadly, this function cannot return a promise, so\r\n    # the $templateRequest alternative becomes useless.\r\n    \"\r\n    <div class=\\\"container table-container\\\" ng-show=\\\"tableParams.total()\\\">\r\n      <div class=\\\"row\\\">\r\n        <div class=\\\"col-md-12\\\">\r\n\r\n          <div ng-if=\\\"options.pagerOnTop\\\">\r\n            #{ pagerTemplate }\r\n          </div>\r\n\r\n          <div class=\\\"table-content row\\\">\r\n            <div class=\\\"panel panel-default\\\">\r\n              <table ng-table=\\\"tableParams\\\" class=\\\"table ng-table ng-table-responsive\\\">\r\n                <thead>\r\n                  <tr>\r\n                    #{ compiledHeaders.join(' ') }\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr ng-repeat=\\\"item in $data\\\">\r\n                    #{ compiledContents.join(' ') }\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <div ng-show=\\\"loadingTable\\\" class=\\\"loadingTable text-center\\\">\r\n              <i class=\\\"fa fa-spin fa-4x fa-spinner\\\"></i>\r\n            </div>\r\n          </div>\r\n\r\n          <div ng-if=\\\"options.pagerOnBottom\\\">\r\n            #{ pagerTemplate }\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div ng-show=\\\"!tableParams.total()\\\">\r\n      #{ ndaTemplate }\r\n    </div>\r\n\r\n    \"\r\n\r\n  controller: ($scope, $element) ->\r\n    $scope.options = _.merge\r\n      pagerOnTop         : DEFAULT_PAGER_ON_TOP\r\n      pagerOnBottom      : DEFAULT_PAGER_ON_BOTTOM\r\n      firstPage          : DEFAULT_FIRST_PAGE\r\n      pageSize           : DEFAULT_PAGE_SIZE\r\n    , $scope.options\r\n\r\n    # Preprocess actions\r\n    $scope.actions = _.map $scope.options.actions, (action, key) ->\r\n      method = if _.isFunction action then action else action.method\r\n      reload = if _.isUndefined action.reload then true else action.reload\r\n      dialog = if action.dialog and action.dialog.templateUrl then action.dialog else undefined\r\n\r\n      methodPromise = (item) ->\r\n        $scope.loadingTable = true\r\n        $q.when()\r\n        .then -> method(item)\r\n        .then ->\r\n          $scope.tableParams.reload() if reload\r\n        .finally ->\r\n          delete $scope.loadingTable\r\n\r\n      return [ key, methodPromise ] if !dialog\r\n\r\n      confirmationMethodPromise = (item) ->\r\n        params = parseAttribute.actions.dialog.params(dialog.params) item\r\n\r\n        # Launch modal\r\n        modalScope = _.merge $scope.$new(true), params\r\n        modalInstance = $modal.open\r\n          templateUrl : action.dialog.templateUrl\r\n          scope       : modalScope\r\n\r\n        # Handle result\r\n        modalInstance.result\r\n        .then ->\r\n          methodPromise(item)\r\n        .catch ->\r\n          if action.dialog and action.dialog.onCancel\r\n            action.dialog.onCancel item, params\r\n\r\n      [ key, confirmationMethodPromise ]\r\n\r\n    $scope.actions = _.object $scope.actions\r\n\r\n    $scope.tableParams = new ngTableParams\r\n      page  : $scope.options.firstPage\r\n      count : $scope.options.pageSize\r\n    ,\r\n      # '$scope: $scope' line added to avoid\r\n      # \"TypeError: Cannot read property '$on' of null\"\r\n      # src: https://github.com/esvit/ng-table/issues/182\r\n      $scope: $scope\r\n\r\n      getData: ($defer, params) ->\r\n        $scope.loadingTable = true\r\n\r\n        skip = (params.page() - 1) * params.count()\r\n        limit = params.count()\r\n\r\n        $scope.options.getPage skip, limit\r\n        .then (results) ->\r\n          $scope.tableParams.total results[0]\r\n          $defer.resolve results[1]\r\n          delete $scope.loadingTable\r\n\r\n###*\r\n  @ngdoc    directive\r\n  @name     ngTableAsyncTableButton\r\n  @module   ngTableAsync\r\n  @restrict E\r\n  @description\r\n  Renders an action button for ngTableAsync directive\r\n###\r\napp.directive 'ngTableAsyncButton', ->\r\n  restrict: 'E'\r\n  scope:\r\n    action : '&'\r\n    label  : '='\r\n    size   : '@'\r\n    style  : '@'\r\n    icon   : '@'\r\n  templateUrl: (element, attrs) ->\r\n    if attrs.templateUrl and attrs.templateUrl != 'undefined'\r\n      attrs.templateUrl\r\n    else\r\n      'partials/_ng_table_async_button.html'\r\n\r\n  link: (scope, element, attrs) ->\r\n    attrs.size  = if attrs.size in [ 'xs', 'sm', 'lg' ] then \"btn-#{attrs.size}\" else ''\r\n    attrs.style = if attrs.style and attrs.style != 'undefined' then \"btn-#{attrs.style}\" else 'btn-default'\r\n    attrs.icon  = if attrs.icon and attrs.icon != 'undefined' then attrs.icon else undefined\r\n\r\n###*\r\n  @ngdoc    directive\r\n  @name     ngTableAsyncNoDataAvailable\r\n  @module   ngTableAsync\r\n  @restrict E\r\n  @description\r\n  Renders a 'No available data' for ngTableAsync directive\r\n###\r\napp.directive 'ngTableAsyncNoDataAvailable', ->\r\n  restrict: 'E'\r\n  templateUrl: (element, attrs) ->\r\n    if attrs.templateUrl and attrs.templateUrl != 'undefined'\r\n      attrs.templateUrl\r\n    else\r\n      'partials/_ng_table_async_no_data_available.html'\r\n\r\n  link: (scope, element, attrs) ->\r\n    if !attrs.text or attrs.text == 'undefined'\r\n      attrs.text = DEFAULT_NO_DATA_AVAILABLE_TEXT\r\n\r\n    scope.text = attrs.text\r\n\r\n###*\r\n  @ngdoc    directive\r\n  @name     ngTableAsyncPager\r\n  @module   ngTableAsync\r\n  @restrict E\r\n  @description\r\n  Renders a pager for ngTableAsync directive\r\n###\r\napp.directive 'ngTableAsyncPager', ->\r\n  restrict: 'E'\r\n  template: (element, attrs) ->\r\n    if !attrs.templateUrl or attrs.templateUrl == 'undefined'\r\n      attrs.templateUrl = 'partials/_ng_table_async_pager.html'\r\n    \"<div ng-table-pagination=\\\"tableParams\\\" template-url=\\\"'#{attrs.templateUrl}'\\\"></div>\"\r\n\r\n"],"sourceRoot":"/source/"}